#!/usr/bin/env python
import sys, re, errno
import hashsplit, git, options
from helpers import *

saved_errors = []

def add_error(e):
    saved_errors.append(e)
    log('%s\n' % e)


def direxpand(names):
    for n in names:
        log('%s\n' % n)
        try:
            for sub in os.listdir(n):
                subfull = os.path.join(n, sub)
                for sub2 in direxpand([subfull]):
                    yield sub2
        except OSError, e:
            if e.errno == errno.ENOTDIR:
                yield n
            elif e.errno in [errno.ENOENT, errno.EPERM, errno.EACCES]:
                add_error(e)
            else:
                raise


optspec = """
bup save [-tc] [-n name] <filenames...>
--
t,tree     output a tree id
c,commit   output a commit id
n,name=    name of backup set to update (if any)
"""
o = options.Options('bup save', optspec)
(opt, flags, extra) = o.parse(sys.argv[1:])

if not (opt.tree or opt.commit or opt.name):
    log("bup save: use one or more of -t, -c, -n\n")
    o.usage()

shalist = []
for fn in direxpand(extra):
    try:
        # FIXME: symlinks etc.
        f = open(fn)
    except IOError, e:
        add_error(e)
        continue
    except OSError, e:
        add_error(e)
        continue
    (mode, id) = hashsplit.split_to_blob_or_tree([f])
    shalist.append((mode, re.sub(r'/', '_', fn), id))
tree = git.gen_tree(shalist)
if opt.tree:
    print tree
if opt.commit or opt.name:
    msg = 'Generated by command:\n%r' % sys.argv
    ref = opt.name and ('refs/heads/%s' % opt.name) or None
    commit = git.gen_commit_easy(ref, tree, msg)
    if opt.commit:
        print commit

if saved_errors:
    log('WARNING: %d errors encountered while saving.\n' % len(saved_errors))
